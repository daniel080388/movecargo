name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-typecheck:
    name: Lint + Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Lint
        run: npm run lint --if-present

  jest:
    name: Jest (unit/integration)
    runs-on: ubuntu-latest
    needs: lint-typecheck
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        env:
          JWT_SECRET: test-secret
          STRIPE_WEBHOOK_SECRET: whsec_test
        run: npm run test:ci

      - name: Upload coverage report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  e2e:
    name: Playwright (E2E)
    runs-on: ubuntu-latest
    needs: jest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: movecargo_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

  e2e:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: movecargo_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Prepare database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/movecargo_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed --schema=./prisma/schema.prisma || true

      - name: Build app
        run: npm run build

      - name: Start app
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/movecargo_test
          JWT_SECRET: test-secret
          NEXT_PUBLIC_MAPBOX_TOKEN: test-token
        run: |
          nohup npm start &
          echo $! > next.pid

      - name: Wait for health
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:3000/api/health > /dev/null; then
              echo "App is healthy"; exit 0; fi; sleep 2; done; exit 1

      - name: Run Playwright tests
        env:
          BASE_URL: http://localhost:3000
        run: npx playwright test

      - name: Stop app
        if: ${{ always() }}
        run: |
          if [ -f next.pid ]; then kill $(cat next.pid) || true; fi
